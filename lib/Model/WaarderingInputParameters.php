<?php
/**
 * WaarderingInputParameters
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Calcasa\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.13.0
 */
 
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Calcasa\Api\Model;

use \ArrayAccess;
use \Calcasa\Api\ObjectSerializer;

/**
 * WaarderingInputParameters Class Doc Comment
 *
 * @category Class
 * @package  Calcasa\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WaarderingInputParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WaarderingInputParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'geldverstrekker' => 'string',
        'productType' => '\Calcasa\Api\Model\ProductType',
        'hypotheekwaarde' => 'int',
        'aanvraagdoel' => '\Calcasa\Api\Model\Aanvraagdoel',
        'klantwaarde' => 'int',
        'klantwaardeType' => '\Calcasa\Api\Model\KlantwaardeType',
        'isBestaandeWoning' => 'bool',
        'bagNummeraanduidingId' => 'int',
        'isNhg' => 'bool',
        'isBestaandeNhgHypotheek' => 'bool',
        'benodigdeOverbrugging' => 'int',
        'peildatum' => '\DateTime',
        'isErfpacht' => 'bool',
        'klantkenmerk' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'geldverstrekker' => null,
        'productType' => null,
        'hypotheekwaarde' => 'int32',
        'aanvraagdoel' => null,
        'klantwaarde' => 'int32',
        'klantwaardeType' => null,
        'isBestaandeWoning' => null,
        'bagNummeraanduidingId' => 'int64',
        'isNhg' => null,
        'isBestaandeNhgHypotheek' => null,
        'benodigdeOverbrugging' => 'int32',
        'peildatum' => 'date',
        'isErfpacht' => null,
        'klantkenmerk' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'geldverstrekker' => false,
        'productType' => false,
        'hypotheekwaarde' => false,
        'aanvraagdoel' => false,
        'klantwaarde' => false,
        'klantwaardeType' => false,
        'isBestaandeWoning' => false,
        'bagNummeraanduidingId' => false,
        'isNhg' => false,
        'isBestaandeNhgHypotheek' => false,
        'benodigdeOverbrugging' => false,
        'peildatum' => true,
        'isErfpacht' => true,
        'klantkenmerk' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'geldverstrekker' => 'geldverstrekker',
        'productType' => 'productType',
        'hypotheekwaarde' => 'hypotheekwaarde',
        'aanvraagdoel' => 'aanvraagdoel',
        'klantwaarde' => 'klantwaarde',
        'klantwaardeType' => 'klantwaardeType',
        'isBestaandeWoning' => 'isBestaandeWoning',
        'bagNummeraanduidingId' => 'bagNummeraanduidingId',
        'isNhg' => 'isNhg',
        'isBestaandeNhgHypotheek' => 'isBestaandeNhgHypotheek',
        'benodigdeOverbrugging' => 'benodigdeOverbrugging',
        'peildatum' => 'peildatum',
        'isErfpacht' => 'isErfpacht',
        'klantkenmerk' => 'klantkenmerk'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'geldverstrekker' => 'setGeldverstrekker',
        'productType' => 'setProductType',
        'hypotheekwaarde' => 'setHypotheekwaarde',
        'aanvraagdoel' => 'setAanvraagdoel',
        'klantwaarde' => 'setKlantwaarde',
        'klantwaardeType' => 'setKlantwaardeType',
        'isBestaandeWoning' => 'setIsBestaandeWoning',
        'bagNummeraanduidingId' => 'setBagNummeraanduidingId',
        'isNhg' => 'setIsNhg',
        'isBestaandeNhgHypotheek' => 'setIsBestaandeNhgHypotheek',
        'benodigdeOverbrugging' => 'setBenodigdeOverbrugging',
        'peildatum' => 'setPeildatum',
        'isErfpacht' => 'setIsErfpacht',
        'klantkenmerk' => 'setKlantkenmerk'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'geldverstrekker' => 'getGeldverstrekker',
        'productType' => 'getProductType',
        'hypotheekwaarde' => 'getHypotheekwaarde',
        'aanvraagdoel' => 'getAanvraagdoel',
        'klantwaarde' => 'getKlantwaarde',
        'klantwaardeType' => 'getKlantwaardeType',
        'isBestaandeWoning' => 'getIsBestaandeWoning',
        'bagNummeraanduidingId' => 'getBagNummeraanduidingId',
        'isNhg' => 'getIsNhg',
        'isBestaandeNhgHypotheek' => 'getIsBestaandeNhgHypotheek',
        'benodigdeOverbrugging' => 'getBenodigdeOverbrugging',
        'peildatum' => 'getPeildatum',
        'isErfpacht' => 'getIsErfpacht',
        'klantkenmerk' => 'getKlantkenmerk'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('geldverstrekker', $data ?? [], null);
        $this->setIfExists('productType', $data ?? [], null);
        $this->setIfExists('hypotheekwaarde', $data ?? [], null);
        $this->setIfExists('aanvraagdoel', $data ?? [], null);
        $this->setIfExists('klantwaarde', $data ?? [], null);
        $this->setIfExists('klantwaardeType', $data ?? [], null);
        $this->setIfExists('isBestaandeWoning', $data ?? [], null);
        $this->setIfExists('bagNummeraanduidingId', $data ?? [], null);
        $this->setIfExists('isNhg', $data ?? [], null);
        $this->setIfExists('isBestaandeNhgHypotheek', $data ?? [], null);
        $this->setIfExists('benodigdeOverbrugging', $data ?? [], null);
        $this->setIfExists('peildatum', $data ?? [], null);
        $this->setIfExists('isErfpacht', $data ?? [], null);
        $this->setIfExists('klantkenmerk', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['productType'] === null) {
            $invalidProperties[] = "'productType' can't be null";
        }
        if ($this->container['bagNummeraanduidingId'] === null) {
            $invalidProperties[] = "'bagNummeraanduidingId' can't be null";
        }
        if (!is_null($this->container['klantkenmerk']) && (mb_strlen($this->container['klantkenmerk']) > 100)) {
            $invalidProperties[] = "invalid value for 'klantkenmerk', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['klantkenmerk']) && (mb_strlen($this->container['klantkenmerk']) < 0)) {
            $invalidProperties[] = "invalid value for 'klantkenmerk', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets geldverstrekker
     *
     * @return string|null
     */
    public function getGeldverstrekker()
    {
        return $this->container['geldverstrekker'];
    }

    /**
     * Sets geldverstrekker
     *
     * @param string|null $geldverstrekker Ongebruikt voor alle producttypen op dit moment. Deze informatie komt uit de credentials.
     *
     * @return self
     */
    public function setGeldverstrekker($geldverstrekker)
    {
        if (is_null($geldverstrekker)) {
            throw new \InvalidArgumentException('non-nullable geldverstrekker cannot be null');
        }
        $this->container['geldverstrekker'] = $geldverstrekker;

        return $this;
    }

    /**
     * Gets productType
     *
     * @return \Calcasa\Api\Model\ProductType
     */
    public function getProductType()
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param \Calcasa\Api\Model\ProductType $productType productType
     *
     * @return self
     */
    public function setProductType($productType)
    {
        if (is_null($productType)) {
            throw new \InvalidArgumentException('non-nullable productType cannot be null');
        }
        $this->container['productType'] = $productType;

        return $this;
    }

    /**
     * Gets hypotheekwaarde
     *
     * @return int|null
     */
    public function getHypotheekwaarde()
    {
        return $this->container['hypotheekwaarde'];
    }

    /**
     * Sets hypotheekwaarde
     *
     * @param int|null $hypotheekwaarde Verplicht voor de producttypen `modelwaardeDesktopTaxatie` en `desktopTaxatie`. Voor het aanvraagdoel `hypotheekOphogen` is dit de som van de huidige hypotheeksom en de ophoging. In hele euros.
     *
     * @return self
     */
    public function setHypotheekwaarde($hypotheekwaarde)
    {
        if (is_null($hypotheekwaarde)) {
            throw new \InvalidArgumentException('non-nullable hypotheekwaarde cannot be null');
        }
        $this->container['hypotheekwaarde'] = $hypotheekwaarde;

        return $this;
    }

    /**
     * Gets aanvraagdoel
     *
     * @return \Calcasa\Api\Model\Aanvraagdoel|null
     */
    public function getAanvraagdoel()
    {
        return $this->container['aanvraagdoel'];
    }

    /**
     * Sets aanvraagdoel
     *
     * @param \Calcasa\Api\Model\Aanvraagdoel|null $aanvraagdoel aanvraagdoel
     *
     * @return self
     */
    public function setAanvraagdoel($aanvraagdoel)
    {
        if (is_null($aanvraagdoel)) {
            throw new \InvalidArgumentException('non-nullable aanvraagdoel cannot be null');
        }
        $this->container['aanvraagdoel'] = $aanvraagdoel;

        return $this;
    }

    /**
     * Gets klantwaarde
     *
     * @return int|null
     */
    public function getKlantwaarde()
    {
        return $this->container['klantwaarde'];
    }

    /**
     * Sets klantwaarde
     *
     * @param int|null $klantwaarde Verplicht voor de producttypen `modelwaardeDesktopTaxatie` en `desktopTaxatie`. In hele euros. De waarde zoals bekend bij de klant met bijbehorende KlantwaardeType.
     *
     * @return self
     */
    public function setKlantwaarde($klantwaarde)
    {
        if (is_null($klantwaarde)) {
            throw new \InvalidArgumentException('non-nullable klantwaarde cannot be null');
        }
        $this->container['klantwaarde'] = $klantwaarde;

        return $this;
    }

    /**
     * Gets klantwaardeType
     *
     * @return \Calcasa\Api\Model\KlantwaardeType|null
     */
    public function getKlantwaardeType()
    {
        return $this->container['klantwaardeType'];
    }

    /**
     * Sets klantwaardeType
     *
     * @param \Calcasa\Api\Model\KlantwaardeType|null $klantwaardeType klantwaardeType
     *
     * @return self
     */
    public function setKlantwaardeType($klantwaardeType)
    {
        if (is_null($klantwaardeType)) {
            throw new \InvalidArgumentException('non-nullable klantwaardeType cannot be null');
        }
        $this->container['klantwaardeType'] = $klantwaardeType;

        return $this;
    }

    /**
     * Gets isBestaandeWoning
     *
     * @return bool|null
     */
    public function getIsBestaandeWoning()
    {
        return $this->container['isBestaandeWoning'];
    }

    /**
     * Sets isBestaandeWoning
     *
     * @param bool|null $isBestaandeWoning Verplicht voor de producttypen `modelwaardeDesktopTaxatie` en `desktopTaxatie`. Geeft aan of het te waarderen object een bestaande koopwoning is.
     *
     * @return self
     */
    public function setIsBestaandeWoning($isBestaandeWoning)
    {
        if (is_null($isBestaandeWoning)) {
            throw new \InvalidArgumentException('non-nullable isBestaandeWoning cannot be null');
        }
        $this->container['isBestaandeWoning'] = $isBestaandeWoning;

        return $this;
    }

    /**
     * Gets bagNummeraanduidingId
     *
     * @return int
     */
    public function getBagNummeraanduidingId()
    {
        return $this->container['bagNummeraanduidingId'];
    }

    /**
     * Sets bagNummeraanduidingId
     *
     * @param int $bagNummeraanduidingId Verplicht voor alle producttypen. Het BAG (Basisregistratie Adressen en Gebouwen) nummeraanduiding id.
     *
     * @return self
     */
    public function setBagNummeraanduidingId($bagNummeraanduidingId)
    {
        if (is_null($bagNummeraanduidingId)) {
            throw new \InvalidArgumentException('non-nullable bagNummeraanduidingId cannot be null');
        }
        $this->container['bagNummeraanduidingId'] = $bagNummeraanduidingId;

        return $this;
    }

    /**
     * Gets isNhg
     *
     * @return bool|null
     */
    public function getIsNhg()
    {
        return $this->container['isNhg'];
    }

    /**
     * Sets isNhg
     *
     * @param bool|null $isNhg Verplicht voor de producttypen `modelwaardeDesktopTaxatie` en `desktopTaxatie`. Geeft aan of er gebruikt gemaakt wordt van de Nationale Hypotheekgarantie.
     *
     * @return self
     */
    public function setIsNhg($isNhg)
    {
        if (is_null($isNhg)) {
            throw new \InvalidArgumentException('non-nullable isNhg cannot be null');
        }
        $this->container['isNhg'] = $isNhg;

        return $this;
    }

    /**
     * Gets isBestaandeNhgHypotheek
     *
     * @return bool|null
     */
    public function getIsBestaandeNhgHypotheek()
    {
        return $this->container['isBestaandeNhgHypotheek'];
    }

    /**
     * Sets isBestaandeNhgHypotheek
     *
     * @param bool|null $isBestaandeNhgHypotheek Verplicht te gebruiken voor de combinatie van de producttypen `modelwaardeDesktopTaxatie` en `desktopTaxatie`, als er gebruikt gemaakt wordt van de Nationale Hypotheekgarantie (`isNhg`) en het aanvraagdoel niet `aankoopNieuweWoning` is. Geeft aan of er bij de eventuele bestaande hypotheek gebruik is gemaakt van de Nationale Hypotheekgarantie.
     *
     * @return self
     */
    public function setIsBestaandeNhgHypotheek($isBestaandeNhgHypotheek)
    {
        if (is_null($isBestaandeNhgHypotheek)) {
            throw new \InvalidArgumentException('non-nullable isBestaandeNhgHypotheek cannot be null');
        }
        $this->container['isBestaandeNhgHypotheek'] = $isBestaandeNhgHypotheek;

        return $this;
    }

    /**
     * Gets benodigdeOverbrugging
     *
     * @return int|null
     */
    public function getBenodigdeOverbrugging()
    {
        return $this->container['benodigdeOverbrugging'];
    }

    /**
     * Sets benodigdeOverbrugging
     *
     * @param int|null $benodigdeOverbrugging Verplicht voor de combinatie van de producttypen `modelwaardeDesktopTaxatie` en `desktopTaxatie` en het aanvraagdoel `overbruggingsfinanciering`. In hele euros.
     *
     * @return self
     */
    public function setBenodigdeOverbrugging($benodigdeOverbrugging)
    {
        if (is_null($benodigdeOverbrugging)) {
            throw new \InvalidArgumentException('non-nullable benodigdeOverbrugging cannot be null');
        }
        $this->container['benodigdeOverbrugging'] = $benodigdeOverbrugging;

        return $this;
    }

    /**
     * Gets peildatum
     *
     * @return \DateTime|null
     */
    public function getPeildatum()
    {
        return $this->container['peildatum'];
    }

    /**
     * Sets peildatum
     *
     * @param \DateTime|null $peildatum Optioneel te gebruiken voor de producttypen `modelwaardeRisico`. Peildatum voor de aanvraag. Standaard de datum van vandaag. Supports yyyy-MM-dd or optionally yyyy-MM-ddTHH:mm:ssZ (ISO) with the time stamp assumed to be in UTC and the time is dropped before using the value.
     *
     * @return self
     */
    public function setPeildatum($peildatum)
    {
        if (is_null($peildatum)) {
            array_push($this->openAPINullablesSetToNull, 'peildatum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('peildatum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['peildatum'] = $peildatum;

        return $this;
    }

    /**
     * Gets isErfpacht
     *
     * @return bool|null
     */
    public function getIsErfpacht()
    {
        return $this->container['isErfpacht'];
    }

    /**
     * Sets isErfpacht
     *
     * @param bool|null $isErfpacht Potentieel verplicht voor de product typen `modelwaardeDesktopTaxatie` en `desktopTaxatie` afhankelijk van de geldverstrekker- en accountconfiguratie.
     *
     * @return self
     */
    public function setIsErfpacht($isErfpacht)
    {
        if (is_null($isErfpacht)) {
            array_push($this->openAPINullablesSetToNull, 'isErfpacht');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isErfpacht', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isErfpacht'] = $isErfpacht;

        return $this;
    }

    /**
     * Gets klantkenmerk
     *
     * @return string|null
     */
    public function getKlantkenmerk()
    {
        return $this->container['klantkenmerk'];
    }

    /**
     * Sets klantkenmerk
     *
     * @param string|null $klantkenmerk Vrij veld voor het opslaan van een klantkenmerk, zoals bijvoorbeeld een dossiernummer of andere interne referentie. Dit veld komt later weer terug in het `origineleInput` veld in het `waardering` object.
     *
     * @return self
     */
    public function setKlantkenmerk($klantkenmerk)
    {
        if (is_null($klantkenmerk)) {
            throw new \InvalidArgumentException('non-nullable klantkenmerk cannot be null');
        }
        if ((mb_strlen($klantkenmerk) > 100)) {
            throw new \InvalidArgumentException('invalid length for $klantkenmerk when calling WaarderingInputParameters., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($klantkenmerk) < 0)) {
            throw new \InvalidArgumentException('invalid length for $klantkenmerk when calling WaarderingInputParameters., must be bigger than or equal to 0.');
        }

        $this->container['klantkenmerk'] = $klantkenmerk;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


