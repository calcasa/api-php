<?php
/**
 * Funderingdata
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Calcasa\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright 2022 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API v1
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@calcasa.nl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Calcasa\Api\Model;

use \ArrayAccess;
use \Calcasa\Api\ObjectSerializer;

/**
 * Funderingdata Class Doc Comment
 *
 * @category Class
 * @description Uitvoer met funderingsinformatie.
 * @package  Calcasa\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Funderingdata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Funderingdata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'typering' => '\Calcasa\Api\Model\FunderingdataTypering',
        'herstelType' => '\Calcasa\Api\Model\FunderingHerstelType',
        'droogstandRisico' => '\Calcasa\Api\Model\FunderingdataDroogstandRisico',
        'optrekkendVochtRisico' => '\Calcasa\Api\Model\FunderingdataOptrekkendVochtRisico',
        'bioInfectieRisico' => '\Calcasa\Api\Model\FunderingdataBioInfectieRisico',
        'herstelkosten' => 'double',
        'bron' => '\Calcasa\Api\Model\FunderingDataBron'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'typering' => null,
        'herstelType' => null,
        'droogstandRisico' => null,
        'optrekkendVochtRisico' => null,
        'bioInfectieRisico' => null,
        'herstelkosten' => 'double',
        'bron' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'typering' => 'typering',
        'herstelType' => 'herstelType',
        'droogstandRisico' => 'droogstandRisico',
        'optrekkendVochtRisico' => 'optrekkendVochtRisico',
        'bioInfectieRisico' => 'bioInfectieRisico',
        'herstelkosten' => 'herstelkosten',
        'bron' => 'bron'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'typering' => 'setTypering',
        'herstelType' => 'setHerstelType',
        'droogstandRisico' => 'setDroogstandRisico',
        'optrekkendVochtRisico' => 'setOptrekkendVochtRisico',
        'bioInfectieRisico' => 'setBioInfectieRisico',
        'herstelkosten' => 'setHerstelkosten',
        'bron' => 'setBron'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'typering' => 'getTypering',
        'herstelType' => 'getHerstelType',
        'droogstandRisico' => 'getDroogstandRisico',
        'optrekkendVochtRisico' => 'getOptrekkendVochtRisico',
        'bioInfectieRisico' => 'getBioInfectieRisico',
        'herstelkosten' => 'getHerstelkosten',
        'bron' => 'getBron'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['typering'] = $data['typering'] ?? null;
        $this->container['herstelType'] = $data['herstelType'] ?? null;
        $this->container['droogstandRisico'] = $data['droogstandRisico'] ?? null;
        $this->container['optrekkendVochtRisico'] = $data['optrekkendVochtRisico'] ?? null;
        $this->container['bioInfectieRisico'] = $data['bioInfectieRisico'] ?? null;
        $this->container['herstelkosten'] = $data['herstelkosten'] ?? null;
        $this->container['bron'] = $data['bron'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets typering
     *
     * @return \Calcasa\Api\Model\FunderingdataTypering|null
     */
    public function getTypering()
    {
        return $this->container['typering'];
    }

    /**
     * Sets typering
     *
     * @param \Calcasa\Api\Model\FunderingdataTypering|null $typering typering
     *
     * @return self
     */
    public function setTypering($typering)
    {
        $this->container['typering'] = $typering;

        return $this;
    }

    /**
     * Gets herstelType
     *
     * @return FunderingHerstelType|null
     */
    public function getHerstelType()
    {
        return $this->container['herstelType'];
    }

    /**
     * Sets herstelType
     *
     * @param FunderingHerstelType|null $herstelType Het herstel-type van de fundering.
     *
     * @return self
     */
    public function setHerstelType($herstelType)
    {
        $this->container['herstelType'] = $herstelType;

        return $this;
    }

    /**
     * Gets droogstandRisico
     *
     * @return \Calcasa\Api\Model\FunderingdataDroogstandRisico|null
     */
    public function getDroogstandRisico()
    {
        return $this->container['droogstandRisico'];
    }

    /**
     * Sets droogstandRisico
     *
     * @param \Calcasa\Api\Model\FunderingdataDroogstandRisico|null $droogstandRisico droogstandRisico
     *
     * @return self
     */
    public function setDroogstandRisico($droogstandRisico)
    {
        $this->container['droogstandRisico'] = $droogstandRisico;

        return $this;
    }

    /**
     * Gets optrekkendVochtRisico
     *
     * @return \Calcasa\Api\Model\FunderingdataOptrekkendVochtRisico|null
     */
    public function getOptrekkendVochtRisico()
    {
        return $this->container['optrekkendVochtRisico'];
    }

    /**
     * Sets optrekkendVochtRisico
     *
     * @param \Calcasa\Api\Model\FunderingdataOptrekkendVochtRisico|null $optrekkendVochtRisico optrekkendVochtRisico
     *
     * @return self
     */
    public function setOptrekkendVochtRisico($optrekkendVochtRisico)
    {
        $this->container['optrekkendVochtRisico'] = $optrekkendVochtRisico;

        return $this;
    }

    /**
     * Gets bioInfectieRisico
     *
     * @return \Calcasa\Api\Model\FunderingdataBioInfectieRisico|null
     */
    public function getBioInfectieRisico()
    {
        return $this->container['bioInfectieRisico'];
    }

    /**
     * Sets bioInfectieRisico
     *
     * @param \Calcasa\Api\Model\FunderingdataBioInfectieRisico|null $bioInfectieRisico bioInfectieRisico
     *
     * @return self
     */
    public function setBioInfectieRisico($bioInfectieRisico)
    {
        $this->container['bioInfectieRisico'] = $bioInfectieRisico;

        return $this;
    }

    /**
     * Gets herstelkosten
     *
     * @return double|null
     */
    public function getHerstelkosten()
    {
        return $this->container['herstelkosten'];
    }

    /**
     * Sets herstelkosten
     *
     * @param double|null $herstelkosten Indicatieve herstelkosten van de fundering.
     *
     * @return self
     */
    public function setHerstelkosten($herstelkosten)
    {
        $this->container['herstelkosten'] = $herstelkosten;

        return $this;
    }

    /**
     * Gets bron
     *
     * @return FunderingDataBron|null
     */
    public function getBron()
    {
        return $this->container['bron'];
    }

    /**
     * Sets bron
     *
     * @param FunderingDataBron|null $bron De bron van de data.Bron waar de funderingsinformatie opgehaald is. | Waarde | Omschrijving | | --- | --- | | `calcasa` | Calcasa data. | | `fundermaps` | Fundermaps data. |
     *
     * @return self
     */
    public function setBron($bron)
    {
        $this->container['bron'] = $bron;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


